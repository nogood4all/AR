
%{
#include <FlexLexer.h>
#include <stdio.h>
#include <vector>
#include "term.hpp"
#define yyerror printf

using namespace std;

int yylex();

Formula * parsed_formula;

%}

%token<value> CONST;
%token<str_attr> ID;
%token<str_attr> IZVODI;
%token EOL;

%type<formula> formula
%type<eq> equality
%type<cvor> term

%type<lista_eq> l_equality
%type<lista_eq> ll_equality

%type<lista_termova> l_term
%type<lista_termova> ll_term

%union {
  std::string * str_attr;
  int value;
  Term * cvor;
  Formula * formula;
  Equality * eq;
  vector<Term*> lista_termova;
  vector<Equality*> lista_eq;
}

%%

start : formula { parsed_formula  = $1; return 0; } ;

formula : '{' l_equality '}' IZVODI equality { $$ = Formula($2, $5); } ;

equality : term '=' term { $$ = new Equality($1, $3); };

l_equality : term ll_equality {$2.push_back($1);
                               std::reverse(std::begin($2), std::end($2));
                               $$ = $2; }
           ; 

ll_equality : ',' term ll_equality  { $3.push_back($2); $$ = $3;  }
            |  { $$ =new std::vector<Equality*>; }
            ;

term : ID {$$ = new Var(*$1); }
     | ID '(' l_term  ')'  { $$ = new Fn(*$1, $3); }
     | CONST {$$ = makeConst(*$1); }
     ;

l_term : term ll_term {$2.push_back($1);
                           std::reverse(std::begin($2), std::end($2));
                           $$ = $2; }
       ; 

ll_term : ',' term ll_term  { $3.push_back($2); $$ = $3;  }
        |  { $$ = new std::vector<Term*>; }
        ;

%%




